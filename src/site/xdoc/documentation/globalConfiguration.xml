<document>
  <properties>
    <author email="fgarsombke@yahoo.com">Franz Garsombke</author>
    <title>Global Configuration</title>
  </properties>
  <head>
    <meta http-equiv="CACHE-CONTROL" name="CACHE-CONTROL" CONTENT="NO-CACHE" />
    <meta http-equiv="PRAGMA" name="PRAGMA" CONTENT="NO-CACHE" />
    <META HTTP-EQUIV="EXPIRES" CONTENT="0" />
  </head>
  <body>
    <section name="Global Configuration">
      <p>
        The configuration block is used to set the global default settings. Also, any Custom Converters are defined
        in this section. The configuration block is entirely "optional".
      </p>
      <p>
        Dozer supports the ability to have multiple mapping files, but only one global configuration across the
        multiple mapping files. We recommend having a separate mapping xml file for specifying the single global
        configuration.
        <b>Implicit mappings will inherit the default values for configuration.</b>
      </p>
      <p>The following is the sample configuration block:</p>
      <source>
        <![CDATA[
<configuration >
  <date-format>MM/dd/yyyy HH:mm</date-format>
  <stop-on-errors>true</stop-on-errors>
  <wildcard>true</wildcard>
  <trim-strings>false</trim-strings>
     
  <custom-converters> <!-- these are always bi-directional -->
    <converter type="net.sf.dozer.util.mapping.converters.TestCustomConverter" >
      <class-a>net.sf.dozer.util.mapping.vo.TestCustomConverterObject</class-a>
      <class-b>another.type.to.Associate</class-b>
    </converter>
     
  </custom-converters>     
</configuration>
       ]]>
      </source>
    </section>

    <subsection name="Overriding Wildcards">
      <p>
        Each individual mapping section can set its own wildcard policy even if there is a global wildcard policy
        defined using the configuration block. For example, the following mapping does not allow wildcards:
      </p>
      <source>
        <![CDATA[ 
<mapping wildcard="false">
  <class-a>net.sf.dozer.util.mapping.vo.SpringBean</class-a>
  <class-b>net.sf.dozer.util.mapping.vo.SpringBeanPrime</class-b>
    
  <field>
    <a>anAttributeToMap</a>
    <b>anAttributeToMapPrime</b>
  </field>
</mapping> 
        ]]>
      </source>
      <p></p>
    </subsection>
    <subsection name="Overriding Date Format">
      <p>
        The same is true for date format values. Each individual mapping section can set its own date format rules.
        For example:
      </p>
      <source>
        <![CDATA[ 
<mapping date-format="MM-dd-yyyy HH:mm:ss"> <!-- Override top level date format default  -->
  <class-a>net.sf.dozer.util.mapping.vo.TestObject</class-a>
  <class-b>net.sf.dozer.util.mapping.vo.TestObjectPrime</class-b>
    
  <field>
    <a>one</a> 
    <b>onePrime</b>
  </field>
</mapping>      
      ]]>
      </source>
      <p></p>
    </subsection>
    <subsection name="Overriding Error Handling">
      <p>You can override the error handling policy for a particular mapping. For example:</p>
      <source>
        <![CDATA[ 
<mapping stop-on-errors="false"> <!-- Override top level defaults -->
  <class-a>net.sf.dozer.util.mapping.vo.TestObject</class-a>
  <class-b>net.sf.dozer.util.mapping.vo.TestObjectPrime</class-b>
    
  <field>
    <a>one</a>
    <b>onePrime</b>
  </field>
</mapping>      
      ]]>
      </source>
      <p></p>
    </subsection>

    <subsection name="Overriding Trim Strings Policy">
      <p>You can override the trim strings policy for a particular mapping. For example:</p>
      <source>
        <![CDATA[ 
<mapping trim-strings="true"> <!-- Override top level defaults -->
  <class-a>net.sf.dozer.util.mapping.vo.TestObject</class-a>
  <class-b>net.sf.dozer.util.mapping.vo.TestObjectPrime</class-b>
    
  <field>
    <a>one</a>
    <b>onePrime</b>
  </field>
</mapping>      
      ]]>
      </source>
      <p></p>
    </subsection>
  </body>
</document>